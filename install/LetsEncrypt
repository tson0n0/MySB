#!/bin/bash
# ----------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################
# Server list:		https://letsencrypt.status.io/
# For test:			Add '--test-cert'
# Documentation:		https://certbot.eff.org/docs/intro.html
######################################################################

#### VARs
sServicesToRestart=""
sDomainsList=()
# List all domains
[[ ! -f "${MySB_InstallDir}/ssl/letsencrypt_domains" ]] && touch "${MySB_InstallDir}/ssl/letsencrypt_domains"

sDomainsList+=("${gsHostNameFqdn}")
for domain in $(cat ${MySB_InstallDir}/ssl/letsencrypt_domains | sed '/#/d'); do
    sDomainsList+=("${domain}")
done
mapfile -t sDomainsList < <(echo ${sDomainsList[*]} | tr ' ' '\n' | sort | uniq)
sCerbotParams="certonly --authenticator standalone --verbose --update-registration --no-eff-email --agree-tos --rsa-key-size 2048 --email ${gsMainUserEmail} --preferred-challenges=http"

#### INSTALL
case "${gsSwitch}" in
    'INSTALL' | 'UPGRADE')
        sPackages=(libaugeas0 augeas-lenses)
        gfnPackagesManage install 'backports' "${sPackages[@]}"
        sPackages=(python-virtualenv python-dev python3-pkg-resources python3-virtualenv gcc dialog libssl-dev libffi-dev libltdl-dev psutils python-augeas)
        gfnPackageBundleInstall "${sPackages[@]}"
        ;;
esac

#### Renew Let's Encrypt servers IPs
fnRenewServersIps() {
    local sLetsEncryptServers sServer sAllIPv4 sIPv4

    sLetsEncryptServers="$(cmdMySQL 'MySB_db' "SELECT addresses FROM lets_encrypt WHERE 1;" | sed -e 's/^ //g;' | sed 's/\s+$//' | sort | uniq)"
    for sServer in $sLetsEncryptServers; do
        cmdMySQL 'MySB_db' "DELETE FROM lets_encrypt WHERE addresses='$sServer';" -v
        sAllIPv4="$(nslookup $sServer | grep 'Add' | grep -v '#' | awk -F: '{ print $2 }' | sed -e 's/^ //g;')"
        sAllIPv4="$(echo $sAllIPv4 | sed -e 's/^ //g;' | sed 's/\s+$//' | sort | uniq)"
        for sIPv4 in $sAllIPv4; do
            if [ "$(gfnValidateIP ${sIPv4})" == "$sIPv4" ]; then
                cmdMySQL 'MySB_db' "INSERT INTO lets_encrypt (addresses,ipv4) VALUES ('$sServer','$sIPv4');" -v
            fi
        done
    done
}

#### Function certificate end date next renewal
fnNextRenewal() {
    local dEndDate sTarGz sDomain aEndDate

    aEndDate=()
    for domain in /etc/letsencrypt/live/*/cert.pem; do
        sDomain="$(echo $domain | cut -d '/' -f 5)"
        dEndDate=$(openssl x509 -in /etc/letsencrypt/live/${sDomain}/cert.pem -noout -dates | grep 'notAfter' | cut -d "=" -f 2)
        dEndDate=$(date -d "${dEndDate}" +%Y-%m-%d)
        aEndDate+=("${dEndDate}")
        unset sDomain
    done
    mapfile -t aEndDate < <(echo ${aEndDate[*]} | tr ' ' '\n' | sort | uniq)

    if [ "${#aEndDate[@]}" -gt 0 ]; then
        # update DB
        cmdMySQL 'MySB_db' "UPDATE system SET letsencrypt_date='${#aEndDate[0]}' WHERE id_system='1';" -v
        # Backup certificates
        sTarGz="${MySB_InstallDir}_backup/letsencrypt_${dEndDate}.tar.gz"
        mkdir -p "${MySB_InstallDir}_backup"
        [[ ! -f ${sTarGz} ]] && tar zcvf "${sTarGz}" /etc/letsencrypt/
    fi
}

#### Function for firewalling
fnFirewalling() {
    local sServer

    case "$1" in
        'before')
            cmdMySQL 'MySB_db' "UPDATE system SET letsencrypt_openport='1' WHERE id_system='1';" -v
            gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/bin/MySB_SecurityRules" 'refresh' '--letsencrypt' 'CRON'
            echo
            ;;
        'after')
            cmdMySQL 'MySB_db' "UPDATE system SET letsencrypt_openport='0' WHERE id_system='1';" -v
            gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/bin/MySB_SecurityRules" 'refresh' '--letsencrypt' 'CRON'
            echo
            ;;
    esac
}

#### Function use of certifciates for services
fnUseOfCertificates() {
    local nNumLine

    if [[ -f "/etc/letsencrypt/live/${gsHostNameFqdn}/fullchain.pem" ]] && [[ -f "/etc/letsencrypt/live/${gsHostNameFqdn}/privkey.pem" ]]; then
        # NginX
        echo "	ssl_certificate_key /etc/letsencrypt/live/${gsHostNameFqdn}/privkey.pem;" >"/etc/nginx/snippets/letsencrypt_${gsHostNameFqdn}.conf"
        echo "	ssl_certificate /etc/letsencrypt/live/${gsHostNameFqdn}/fullchain.pem;" >>"/etc/nginx/snippets/letsencrypt_${gsHostNameFqdn}.conf"
        echo "	include snippets/letsencrypt_${gsHostNameFqdn}.conf;" >/etc/nginx/ssl_certificate
        sServicesToRestart="${sServicesToRestart} nginx"

        # Webmin
        if [[ -f /etc/webmin/miniserv.pem ]]; then
            log_daemon_msg "Reconfigure Webmin"
            if [ -f /etc/letsencrypt/live/${gsHostNameFqdn}/fullchain.pem ]; then
                cat /etc/letsencrypt/live/${gsHostNameFqdn}/privkey.pem >/etc/webmin/miniserv.pem
                cat /etc/letsencrypt/live/${gsHostNameFqdn}/fullchain.pem >>/etc/webmin/miniserv.pem
            else
                cat $MySB_InstallDir/ssl/mysb.cert >/etc/webmin/miniserv.pem
                cat $MySB_InstallDir/ssl/mysb.key >>/etc/webmin/miniserv.pem
            fi
            sServicesToRestart="${sServicesToRestart} webmin"
            gfnStatusLSB
        fi

        # VSFTPd
        if [[ -f /etc/vsftpd.conf ]]; then
            gfnScriptInvoke 'ScreenSTD' "$MySB_InstallDir/install/VSFTP" 'UPGRADE'
        fi

        # Postfix/Stunnel
        if [[ -f /etc/stunnel/stunnel.conf ]]; then
            gfnScriptInvoke 'ScreenSTD' "$MySB_InstallDir/install/Postfix" 'UPGRADE'
        fi

        #### Tautulli
        gfnGetRepoValues 'Tautulli'
        if [[ -f ${gsRepoDir}/config.ini ]]; then
            gfnManageServices stop "tautulli"
            nNumLine=$(cat ${gsRepoDir}/config.ini | grep 'pms_name' -n -m 1 | cut -d ':' -f 1)
            sed -i '/pms_name/d' ${gsRepoDir}/config.ini
            sed -i "${nNumLine}i\pms_name = ${gsHostNameFqdn}" ${gsRepoDir}/config.ini
            nNumLine=$(cat ${gsRepoDir}/config.ini | grep 'http_base_url' -n -m 1 | cut -d ':' -f 1)
            sed -i '/http_base_url/d' ${gsRepoDir}/config.ini
            sed -i "${nNumLine}i\http_base_url = https://${gsHostNameFqdn}:$gsPort_MySB_HTTPS" ${gsRepoDir}/config.ini
            nNumLine=$(cat ${gsRepoDir}/config.ini | grep 'https_cert' -n -m 1 | cut -d ':' -f 1)
            sed -i '/https_cert/d' ${gsRepoDir}/config.ini
            sed -i '/https_key/d' ${gsRepoDir}/config.ini
            sed -i '/https_cert_chain/d' ${gsRepoDir}/config.ini
            if ([ -f /etc/letsencrypt/live/${sNewFQDN}/fullchain.pem ] && [ -f /etc/letsencrypt/live/${sNewFQDN}/privkey.pem ]); then
                sed -i "${nNumLine}i\https_cert = /etc/letsencrypt/live/${gsHostNameFqdn}/cert.pem" ${gsRepoDir}/config.ini
                sed -i "${nNumLine}i\https_key = /etc/letsencrypt/live/${gsHostNameFqdn}/privkey.pem" ${gsRepoDir}/config.ini
                sed -i "${nNumLine}i\https_cert_chain = /etc/letsencrypt/live/${gsHostNameFqdn}/fullchain.pem" ${gsRepoDir}/config.ini
            else
                sed -i "${nNumLine}i\https_cert = $MySB_InstallDir/ssl/mysb.cert" ${gsRepoDir}/config.ini
                sed -i "${nNumLine}i\https_key = $MySB_InstallDir/ssl/mysb.key" ${gsRepoDir}/config.ini
                sed -i "${nNumLine}i\https_cert_chain = " ${gsRepoDir}/config.ini
            fi
            sServicesToRestart="${sServicesToRestart} tautulli"
        fi
    else
        rm -vf "/etc/nginx/snippets/letsencrypt_${gsHostNameFqdn}.conf"
    fi
}

#### Check
sNewDomains=""
for sDomain in "${sDomainsList[@]}"; do
    [[ -z ${sDomain}   ]] && continue
    [[ ! -f "/etc/letsencrypt/live/${sDomain}/fullchain.pem" ]] && sNewDomains="${sNewDomains} -d ${sDomain}"
done
sNewDomains=$(echo ${sNewDomains} | sed '/^ /d')

#### Generate new certificates
if [[ -n ${sNewDomains} ]]; then
    # Update certificates for python
    update-ca-certificates --fresh &>/dev/null

    # Renew Let's Encrypt servers IPs
    fnRenewServersIps

    # Firewall
    fnFirewalling 'before'

    # Dev mode ?
    [[ ${gbDevMode} -eq 1 ]] && sCerbotParams="${sCerbotParams} --test-cert"

    cd "${MySB_Files}"/ || exit
    chmod +x certbot-auto
    ./certbot-auto "${sCerbotParams}" "${sNewDomains}" --pre-hook "service nginx stop" --post-hook "service nginx start"

    if [[ -f "/etc/letsencrypt/live/${gsHostNameFqdn}/fullchain.pem" ]]; then
        # Certificate end date (-21 days)
        fnNextRenewal
        # Use of new certificate
        fnUseOfCertificates
    fi

    cmdMySQL 'MySB_db' "UPDATE services SET to_install='0', is_installed='1' WHERE serv_name='Lets Encrypt';" -v

    # Firewall
    fnFirewalling 'after'
fi

#### Renewal certificates
if [[ "renew" =~ ^($*)$ ]] || [[ ${gsSwitch} == "UPGRADE" ]]; then
    dEndDate=$(cmdMySQL 'MySB_db' "SELECT letsencrypt_date FROM system WHERE id_system='1';")
    if [[ ${dEndDate} == "0000-00-00" ]]; then
        fnNextRenewal
        dEndDate=$(cmdMySQL 'MySB_db' "SELECT letsencrypt_date FROM system WHERE id_system='1';")
    fi

    # Debug
    echo "dEndDate: ${dEndDate}"
    if [[ -n ${dEndDate} ]]; then
        dEndDate=$(date -d "${dEndDate}" +%Y%m%d)
        dNow=$(date +%Y%m%d)
        tDiff=$((($(date --date="${dEndDate}" +%s) - $(date --date="${dNow}" +%s)) / (60 * 60 * 24)))

        if [[ ${tDiff} -le 21 ]]; then
            # Update certificates for python
            update-ca-certificates --fresh &>/dev/null

            # Renew Let's Encrypt servers IPs
            fnRenewServersIps

            # Firewall
            fnFirewalling 'before'

            cd "${MySB_Files}"/ || exit
            chmod +x certbot-auto
            ./certbot-auto renew --pre-hook "service nginx stop" --post-hook "service nginx start"
            dNewEndDate=$(openssl x509 -in /etc/letsencrypt/live/${gsHostNameFqdn}/cert.pem -noout -dates | grep 'notAfter' | cut -d "=" -f 2)
            [[ ${dNewEndDate} != "${dEndDate}" ]] && fnNextRenewal

            # Firewall
            fnFirewalling 'after'
        else
            echo "tDiff: ${tDiff}"
        fi
    fi
else
    fnNextRenewal
fi

#### NginX snippet
if [[ ! -f "/etc/nginx/snippets/letsencrypt_${gsHostNameFqdn}.conf" ]]; then
    # Use of new certificate
    fnUseOfCertificates
fi

#### Clean
[[ -d /opt/eff.org ]] && rm -rf /opt/eff.org

#### Restart services
[[ -n ${sServicesToRestart} ]] && gfnManageServices start "${sServicesToRestart}"

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
