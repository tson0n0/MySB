#!/bin/bash
# ----------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

# "BlocklistsRTorrent.bsh": 	DOUBLON / ADMIN
# "GetTrackersCert.bsh": 		DOUBLON / ADMIN
# "MySB_CreateUser": 			ADMIN / ARGS
# "MySB_DeleteUser": 			ADMIN / ARGS
# "MySB_ChangeUserPassword": 	DOUBLON / USER / ARGS
# "MySB_SecurityRules": 		DOUBLON / USER
# "Postfix": 					DOUBLON / ADMIN

UserApplying="$1"
LocSwitch="$2"

fnDoApplyConfig() {
    local sAllCommandsUser sCommandUser sCommandsPriorities sAllCommands sCommandLine sCommand sCommandArg
    local sUserToCreate sUserSftp sUserSudo sUserMail sUserAccountType sUserToDelete sUserName sUserPass sUserScriptName sUserScriptMode
    local nMinPriority nMaxPriority nLastPriority nPriority nQuota

    # 1 - Purger la base des entrées en double (command + user), uniquement l'entrée avec la priorité la plus haute sera conservée
    User=$1

    echo "$(/bin/date '+%H:%M:%S') - Creating order of execution for $UserApplying"
    sAllCommandsUser="$(cmdMySQL 'MySB_db' "SELECT commands FROM commands WHERE user='$User';")"
    for sCommandUser in $sAllCommandsUser; do
        case "$sCommandUser" in
            BlocklistsRTorrent.bsh | MySB_SecurityRules* | GetTrackersCert.bsh | MySB_ChangeUserPassword | Postfix | Options_MySB | Options_System | OpenVPN | Restart_rTorrent | ManageAddresses | UserScript_StartSynchro | Quota_Update) # On peut supprimer les doublons
                sCommandsPriorities="$(cmdMySQL 'MySB_db' "SELECT min(priority), max(priority) FROM commands WHERE user='$User' AND commands='$sCommandUser';" | sed 's/\t/|/g;')"
                nMinPriority="$(echo $sCommandsPriorities | awk '{split($0,a,"|"); print a[1]}')"
                nMaxPriority="$(echo $sCommandsPriorities | awk '{split($0,a,"|"); print a[2]}')"
                if [ $nMinPriority -ne $nMaxPriority ] && [ -n "$nMinPriority" ] && [ -n "$nMaxPriority" ]; then
                    while [ $nMinPriority -lt $nMaxPriority ]; do
                        # On supprime les premières commandes
                        echo -n "	--> " && echo "DELETE FROM commands WHERE user='$User' AND commands='$sCommandUser' AND priority='$nMinPriority';"
                        cmdMySQL 'MySB_db' "DELETE FROM commands WHERE user='$User' AND commands='$sCommandUser' AND priority='$nMinPriority';"
                        ((nMinPriority++))
                    done
                fi
                ;;
        esac
    done

    # 2 - En fonction de l'ensemble des commandes, on réorganise certaines.
    # Par exemple, la commande 'MySB_SecurityRules' devra être exécutée une seule fois et en dernier
    # On en garde qu'une seule tout utilisateur confondu et assigne une priorité maxi.
    sCommandsPriorities="$(cmdMySQL 'MySB_db' "SELECT min(priority), max(priority) FROM commands WHERE commands='MySB_SecurityRules' AND user='$User';" | sed 's/NULL/0/g;' | sed 's/\t/|/g;')"
    nMinPriority="$(echo $sCommandsPriorities | awk '{split($0,a,"|"); print a[1]}')"
    nMaxPriority="$(echo $sCommandsPriorities | awk '{split($0,a,"|"); print a[2]}')"
    if [ $nMinPriority -ne $nMaxPriority ] && [ -n "$nMinPriority" ] && [ -n "$nMaxPriority" ]; then
        while [ $nMinPriority -lt $nMaxPriority ]; do
            # On supprime les premières commandes
            echo -n "	--> " && echo "DELETE FROM commands WHERE commands='MySB_SecurityRules' AND priority='$nMinPriority' AND user='$User';"
            cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='MySB_SecurityRules' AND priority='$nMinPriority' AND user='$User';"
            ((nMinPriority++))
        done
    fi

    # Maintenant on prend la priorité globale maxi toute commandes confondues, puis on incrémente de 1 'MySB_SecurityRules'.
    nLastPriority="$(cmdMySQL 'MySB_db' "SELECT max(priority) FROM commands WHERE user='$User';")"
    ((nLastPriority++))
    echo -n "	--> " && echo "UPDATE commands SET priority='$nLastPriority' WHERE commands='MySB_SecurityRules' AND user='$User';"
    cmdMySQL 'MySB_db' "UPDATE commands SET priority='$nLastPriority' WHERE commands='MySB_SecurityRules' AND user='$User';"
    # 3 - On peut maintenant exécuté les commandes une à une dans l'ordre ascendant des priorités.
    sAllCommands="$(cmdMySQL 'MySB_db' "SELECT commands,priority FROM commands WHERE user='$User' ORDER BY priority ASC;" | sed 's/\t/|/g;')"
    for sCommandLine in $sAllCommands; do
        sCommand="$(echo $sCommandLine | awk '{split($0,a,"|"); print a[1]}')"
        nPriority="$(echo $sCommandLine | awk '{split($0,a,"|"); print a[2]}')"

        # Creating arguments listing
        case "$sCommand" in
            MySB_CreateUser | MySB_DeleteUser | MySB_ChangeUserPassword | OpenVPN | LogWatch | UserScript_StartSynchro | Options_System)
                echo "$(/bin/date '+%H:%M:%S') - Getting arguments for $sCommand"
                sCommandArg="$(cmdMySQL 'MySB_db' "SELECT args FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';")"
                ;;
        esac

        # Execute commands
        echo "$(/bin/date '+%H:%M:%S') - Executing $sCommand for $UserApplying"
        case "$sCommand" in
            "MySB_CreateUser") # ($1 = user, $2 = sftp, $3 = sudo, $4 = email, $5 = account_type, $6 = quota Gb)
                IFS='|' read -a array <<<"$sCommandArg"
                sUserToCreate="${array[0]}"
                sUserSftp="${array[1]}"
                sUserSudo="${array[2]}"
                sUserMail="${array[3]}"
                sUserAccountType="${array[4]}"
                nQuota="${array[5]}"

                gfnWaitingSTD MySB_CreateUser
                screen -dmS MySB_CreateUser /bin/bash $MySB_InstallDir/bin/MySB_CreateUser "$sUserToCreate" "$sUserSftp" "$sUserSudo" "$sUserMail" "$sUserAccountType" "$nQuota" 'APPLYCONFIG'
                gfnWaitingSTD MySB_CreateUser
                rm -vf /tmp/MySB_Portal.lock
                echo -n "	--> " && echo "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                ;;

            "MySB_DeleteUser") # 1 args
                sUserToDelete="$sCommandArg"

                gfnWaitingSTD MySB_DeleteUser
                screen -dmS MySB_DeleteUser /bin/bash $MySB_InstallDir/bin/MySB_DeleteUser "$sUserToDelete" 'APPLYCONFIG'
                gfnWaitingSTD MySB_DeleteUser
                rm -vf /tmp/MySB_Portal.lock
                echo -n "	--> " && echo "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                ;;

            "MySB_ChangeUserPassword") # ($1 = username, $2 = userpass)
                IFS='|' read -a array <<<"$sCommandArg"
                sUserName="${array[0]}"
                sUserPass="${array[1]}"

                gfnWaitingSTD MySB_ChangeUserPassword
                screen -dmS MySB_ChangeUserPassword /bin/bash $MySB_InstallDir/bin/MySB_ChangeUserPassword "$sUserName" "$sUserPass" 'APPLYCONFIG'
                gfnWaitingSTD MySB_ChangeUserPassword
                gfnWaitingSTD MySB_SecurityRules
                screen -dmS MySB_SecurityRules /bin/bash $MySB_InstallDir/bin/MySB_SecurityRules 'refresh' '--users' 'APPLYCONFIG'
                gfnWaitingSTD MySB_SecurityRules
                echo -n "	--> " && echo "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                ;;

            "BlocklistsRTorrent.bsh")
                gfnWaitingSTD BlocklistsRTorrent
                screen -dmS BlocklistsRTorrent /bin/bash $MySB_InstallDir/scripts/BlocklistsRTorrent.bsh 'APPLYCONFIG'
                gfnWaitingSTD BlocklistsRTorrent
                echo -n "	--> " && echo "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                ;;

            "Blocklists_PeerGuardian")
                gfnWaitingSTD MySB_SecurityRules
                screen -dmS MySB_SecurityRules /bin/bash $MySB_InstallDir/bin/MySB_SecurityRules 'refresh' '--blocklists' 'APPLYCONFIG'
                gfnWaitingSTD MySB_SecurityRules
                echo -n "	--> " && echo "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                ;;

            "ManageAddresses")
                gfnWaitingSTD MySB_SecurityRules
                screen -dmS MySB_SecurityRules /bin/bash $MySB_InstallDir/bin/MySB_SecurityRules 'refresh' '--users' 'APPLYCONFIG'
                gfnWaitingSTD MySB_SecurityRules
                echo -n "	--> " && echo "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                ;;

            "MySB_SecurityRules")
                gfnWaitingSTD MySB_SecurityRules
                screen -dmS MySB_SecurityRules /bin/bash $MySB_InstallDir/bin/MySB_SecurityRules 'create' 'APPLYCONFIG'
                gfnWaitingSTD MySB_SecurityRules
                echo -n "	--> " && echo "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                ;;

            "GetTrackersCert.bsh")
                gfnWaitingSTD GetTrackersCert
                screen -dmS GetTrackersCert /bin/bash $MySB_InstallDir/scripts/GetTrackersCert.bsh 'APPLYCONFIG'
                gfnWaitingSTD GetTrackersCert

                gfnWaitingSTD MySB_SecurityRules
                screen -dmS MySB_SecurityRules /bin/bash $MySB_InstallDir/bin/MySB_SecurityRules 'refresh' '--trackers' 'APPLYCONFIG'
                gfnWaitingSTD MySB_SecurityRules
                echo -n "	--> " && echo "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                ;;

            "Postfix")
                gfnWaitingSTD Postfix
                screen -dmS Postfix /bin/bash $MySB_InstallDir/install/Postfix 'APPLYCONFIG'
                gfnWaitingSTD Postfix
                echo -n "	--> " && echo "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                ;;

            "Options_MySB")
                gfnWaitingSTD Options_MySB-$User
                # shellcheck source=inc/funcs_by_script/funcs_MySB_CreateUser
                source $MySB_InstallDir/inc/funcs_by_script/funcs_MySB_CreateUser
                gfnUserCrontab "$User"
                gfnWaitingSTD Options_MySB-$User
                echo -n "	--> " && echo "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                ;;

            "Restart_rTorrent")
                gfnWaitingSTD rTorrent-$User
                screen -dmS rTorrent-$User systemctl restart rtorrent-$User &>/dev/null
                gfnWaitingSTD rTorrent-$User
                echo -n "	--> " && echo "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                ;;

            "Options_System") # ($1 = OpenVPN:[-1|0|1], $2 = LogWatch:[-1|0|1], $3 = DNScrypt:[-1|0|1], $4 = MySB_SecurityRules])
                IFS='|' read -a array <<<"$sCommandArg"
                OpenVpnSwitch="${array[0]}"
                LogwatchSwitch="${array[1]}"
                DNScryptSwitch="${array[2]}"
                SecurityRules="${array[3]}"

                OpenVpnValue="$(echo $OpenVpnSwitch | cut -d ":" -f 2)"
                case "$OpenVpnValue" in
                    1)
                        gfnWaitingSTD OpenVPN
                        screen -dmS OpenVPN_Zip /bin/bash $MySB_InstallDir/install/OpenVPN refresh 'APPLYCONFIG'
                        gfnWaitingSTD OpenVPN
                        ;;
                esac

                LogwatchValue="$(echo $LogwatchSwitch | cut -d ":" -f 2)"
                case "$LogwatchValue" in
                    0) [ -f /etc/cron.daily/00logwatch ] && rm /etc/cron.daily/00logwatch ;;
                    1) [ ! -f /etc/cron.daily/00logwatch ] && install -g root -o root -m 0755 $MySB_InstallDir/templates/logwatch/etc.cron.daily.00logwatch.tmpl /etc/cron.daily/00logwatch ;;
                esac

                case "$(echo $DNScryptSwitch | cut -d ":" -f 2)" in
                    0 | 1)
                        gfnManageServices stop "dnscrypt-proxy"
                        case "$gbDnsCryptSwitch" in
                            1) gfnManageServices start "dnscrypt-proxy" ;;
                        esac
                        ;;
                esac

                if [ -n "$SecurityRules" ]; then
                    gfnWaitingSTD MySB_SecurityRules
                    screen -dmS MySB_SecurityRules /bin/bash $MySB_InstallDir/bin/MySB_SecurityRules 'refresh' '--pglcmd' 'APPLYCONFIG'
                    gfnWaitingSTD MySB_SecurityRules
                fi

                echo -n "	--> " && echo "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                ;;

            "OpenVPN") # ($1 = username, $2 = userpass)
                IFS='|' read -a array <<<"$sCommandArg"
                sUserName="${array[0]}"
                sUserPass="${array[1]}"

                gfnWaitingSTD OpenVPN_Zip
                screen -dmS OpenVPN_Zip /bin/bash $MySB_InstallDir/install/OpenVPN zip "$sUserName" "$sUserPass" 'APPLYCONFIG'
                gfnWaitingSTD OpenVPN_Zip
                echo -n "	--> " && echo "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                ;;

            "UserScript_StartSynchro") # ($1 = script, $2 = mode)
                IFS='|' read -a array <<<"$sCommandArg"
                sUserScriptName="${array[0]}"
                sUserScriptMode="${array[1]}"

                if [ -f /home/$User/scripts/$sUserScriptName ]; then
                    case "$sUserScriptMode" in
                        'DIRECT') screen -dmS UserScript_StartSynchro su -s /bin/sh $User -c "/bin/bash /home/$User/scripts/$sUserScriptName 'DIRECT' > /dev/null 2>&1" ;;
                        'CRON') screen -dmS UserScript_StartSynchro su -s /bin/sh $User -c "/bin/bash /home/$User/scripts/$sUserScriptName 'CRON' > /dev/null 2>&1" ;;
                    esac
                fi
                echo -n "	--> " && echo "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                ;;

            "Quota_Update")
                # shellcheck source=inc/funcs_by_script/funcs_MySB_CreateUser
                source $MySB_InstallDir/inc/funcs_by_script/funcs_MySB_CreateUser
                gfnManageQuota '-v'
                echo -n "	--> " && echo "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                cmdMySQL 'MySB_db' "DELETE FROM commands WHERE commands='$sCommand' AND user='$User' AND priority='$nPriority';"
                ;;
        esac
    done
}

case "$LocSwitch" in
    "DO_APPLY") # Execute by portal
        screen -dmS ApplyConfig_$UserApplying /bin/bash $MySB_InstallDir/scripts/ApplyConfig.bsh "$UserApplying" 'SCREEN'
        cmdMySQL 'MySB_db' "UPDATE commands SET reload='0' WHERE user='$UserApplying';"
        ;;
    "SCREEN")
        echo "$(/bin/date '+%H:%M:%S') - Waiting authorization"
        while [ -n "$(ps ax | grep 'ApplyConfig.bsh' | grep 'SCREEN' | grep -v "$UserApplying" | grep -v 'grep')" ]; do
            sleep 1
        done

        if [ -n "$UserApplying" ]; then
            echo "$(/bin/date '+%H:%M:%S') - Executing commands"
            fnDoApplyConfig $UserApplying
        fi
        ;;
esac

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
