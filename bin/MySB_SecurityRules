#!/bin/bash
# ----------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################
#
# Usage:	MySB_SecurityRules {clean|create|refresh}
#
##################### FIRST LINE #####################################

# shellcheck source=inc/funcs_iptables
source "${MySB_InstallDir}"/inc/funcs_iptables

#### Check params
nNbArgs=$#
ModeSwitch=""
RefreshSwitch=""
for ((nArgs = 1; nArgs <= nNbArgs; nArgs++)); do
    case "$nArgs" in
        1) InitSwitch="$1" ;;
        2)
            case "$2" in
                --*) RefreshSwitch="$2" ;;
                *) ModeSwitch="$2" ;;
            esac
            ;;
        3) ModeSwitch="$3" ;;
    esac
done
export RefreshSwitch ModeSwitch

#### Begin
case "$InitSwitch" in
    clean)
        #### First, we load all variables
        gfnLoadingVars

        #### STOP services
        gfnRestartRtorrentSessions "stop"
        gfnManageServices stop "${ServicesToStop} ${rTorrentToStop} pglcmd fail2ban cron"
        #### STOP services

        #### IPtables - Removal of existing rules
        log_daemon_msg "${SecurityRules_IPtables_RemoveAll}"
        gfnFlushingIptables
        gfnStatusLSB
        #### IPtables - Removal of existing rules

        #### NginX - Satisfy all
        if [ "${ApplyConfigNginx}" == "YES" ]; then
            log_daemon_msg "${SecurityRules_NginX_SatisfyAll}"
            echo "	# Allow any one" >>/etc/nginx/conf.d/ip_restriction
            echo "	satisfy all;" >/etc/nginx/conf.d/ip_restriction
            gfnStatusLSB
        else
            log_daemon_msg "${SecurityRules_NginX_NotInstalled}"
            gfnStatusLSB
        fi
        #### NginX - Satisfy all

        #### Bind - Unblock inactive tracker domains
        if [ "${ApplyConfigBind}" == "YES" ]; then
            log_daemon_msg "${SecurityRules_Bind_UnblockTracker}"
            perl -pi -e "s/^include \"\/etc\/bind\/MySB.zones.blakclists\";/#include \"\/etc\/bind\/MySB.zones.blakclists\";/g" /etc/bind/named.conf.local
            gfnStatusLSB
        else
            log_daemon_msg "${SecurityRules_Bind_NotInstalled}"
            gfnStatusLSB
        fi
        #### Bind - Unblock inactive tracker domains

        #### START services
        gfnManageServices start "nginx bind9"
        #### START services

        #### IPtables - SAVE Iptables Rules
        iptables-save >"${gsIptablesRules}"
        [ -f "${gsIptablesRules}" ] && cp -f "${gsIptablesRules}" "$MySB_InstallDir"/files/current-iptables-rules
        if [ "${gbIsInstalled_Webmin}" == "YES" ] && [ -d /etc/webmin/firewall/ ]; then
            cp -f "${gsIptablesRules}" /etc/webmin/firewall/iptables.save
        fi
        if [ -n "${gbDevMode}" ] && [ "$gbDevMode" -eq 1 ]; then
            cat "${gsIptablesRules}" >>"$MySB_InstallDir/logs/IPTABLES/${gsScriptName}_IPTABLES.log"
        fi
        #### IPtables - SAVE Iptables Rules
        ;;

    create)
        #### First, we load all variables
        gfnLoadingVars

        #### STOP services
        gfnRestartRtorrentSessions "stop"
        gfnRestartRtorrentSessions "start"
        gfnManageServices stop "${ServicesToStop} ${rTorrentToStop} cron pglcmd fail2ban"
        #### STOP services

        #### Kernel - Loading modules
        if [ "${LoadKernelModules}" == "YES" ]; then
            log_daemon_msg "${SecurityRules_Kernel_Loading}"
            gfnLoadingKernelModules
            gfnStatusLSB
        fi
        #### Kernel - Loading modules

        #### Kernel - Parameter Configuration
        if [ "${LoadKernelParameter}" == "YES" ]; then
            log_daemon_msg "${SecurityRules_Kernel_Parameter}"
            gfnKernelParamConfig
            gfnStatusLSB
        fi
        #### Kernel - Parameter Configuration

        #### IPtables - Removal of existing rules
        log_daemon_msg "$SecurityRules_IPtables_RemoveAll"
        gfnFlushingIptables
        gfnStatusLSB
        #### IPtables - Removal of existing rules

        #### IPtables - Prohibit any incoming/outgoing connections
        log_daemon_msg "${SecurityRules_IPtables_ProhibitConn}"
        iptables -P INPUT DROP
        iptables -P FORWARD DROP
        iptables -P OUTPUT DROP
        gfnStatusLSB
        #### IPtables - Prohibit any incoming/outgoing connections

        #### IPtables - Creating user chains
        log_daemon_msg "${SecurityRules_IPtables_UserChains}"
        gfnCreatingUserChain
        gfnStatusLSB
        #### IPtables - Creating user chains

        #### IPtables - Populating user chains
        log_daemon_msg "${SecurityRules_IPtables_BadChains}"
        gfnPopulatingBadChain
        gfnStatusLSB
        #### IPtables - Populating user chains

        #### IPtables - Populating ICMP chain
        Message="${SecurityRules_IPtables_ICMP_0}"
        if [ -n "${gsServerProvider}" ] && [ "$gsServerProvider" != "${Global_NO}" ]; then
            Message="${SecurityRules_IPtables_ICMP_1}"
        fi
        log_daemon_msg "$Message"
        gfnPopulatingIcmpChain 'create'
        gfnStatusLSB
        #### IPtables - Populating ICMP chain

        #### IPtables - Populating UDP inboud user chain
        log_daemon_msg "${SecurityRules_IPtables_UdpIn}"
        gfnPopulatingUdpInboundChain 'create'
        gfnStatusLSB
        #### IPtables - Populating UDP inboud chain

        #### IPtables - Populating UDP outbound chain
        log_daemon_msg "${SecurityRules_IPtables_UdpOut}"
        gfnPopulatingUdpOutboundChain
        gfnStatusLSB
        #### IPtables - Populating UDP outbound chain

        #### IPtables - Populating TCP inboud user chain
        log_daemon_msg "${SecurityRules_IPtables_TcpIn}"
        gfnPopulatingTcpInboundChain 'create'
        gfnStatusLSB
        #### IPtables - Populating TCP inboud chain

        #### IPtables - Populating TCP outbound user chain
        log_daemon_msg "${SecurityRules_IPtables_TcpOut}"
        gfnPopulatingTcpOutboundChain
        gfnStatusLSB
        #### IPtables - Populating TCP outbound chain

        #### IPtables - Process INPUT chain
        log_daemon_msg "${SecurityRules_IPtables_Input}"
        gfnProcessInputChain
        gfnStatusLSB
        #### IPtables - Process INPUT chain

        #### IPtables - Process FORWARD chain
        log_daemon_msg "${SecurityRules_IPtables_Forward}"
        gfnProcessForwardChain
        gfnStatusLSB
        #### IPtables - Process FORWARD chain

        #### IPtables - Process OUTPUT chain
        log_daemon_msg "${SecurityRules_IPtables_Output}"
        gfnProcessOutputChain
        gfnStatusLSB
        #### IPtables - Process OUTPUT chain

        #### IPtables - Process NAT PREROUTING chain
        log_daemon_msg "${SecurityRules_IPtables_NatPretrouting}"
        gfnProcessNatPreroutingChain
        gfnStatusLSB
        #### IPtables - Process NAT PREROUTING chain

        #### IPtables - Process NAT POSTROUTING chain
        log_daemon_msg "${SecurityRules_IPtables_NatPostrouting}"
        gfnProcessNatPostroutingChain
        gfnStatusLSB
        #### IPtables - Process NAT POSTROUTING chain

        #### IPtables - Process NAT OUTPUT chain
        log_daemon_msg "${SecurityRules_IPtables_NatOutput}"
        gfnProcessNatOutputChain
        gfnStatusLSB
        #### IPtables - Process NAT DOCKER chain

        #### IPtables - Process NAT DOCKER chain
        log_daemon_msg "${SecurityRules_IPtables_NatDocker}"
        gfnProcessNatDockerChain
        gfnStatusLSB
        #### IPtables - Process NAT DOCKER chain

        #### IPtables - Process DOCKER's chains
        log_daemon_msg "${SecurityRules_IPtables_Docker}"
        gfnProcessDockerChains
        gfnStatusLSB
        #### IPtables - Process DOCKER's chains

        #### Services - Create all security rules for services
        gfnCreateServicesRules
        #### Services - Create all security rules for services

        #### Force users quota
        if [ "$ModeSwitch" == "INIT" ]; then
            # shellcheck source=inc/funcs_by_script/funcs_MySB_CreateUser
            source "$MySB_InstallDir"/inc/funcs_by_script/funcs_MySB_CreateUser
            gfnManageQuota ""
        fi
        #### Force users quota

        #### STOP services
        gfnManageServices stop "${ServicesToStop}"
        #### STOP services

        #### START services
        gfnManageServices start "${ServicesToRestart} ${rTorrentToStart}"
        #### START services

        #### IPtables - SAVE Iptables Rules
        iptables-save >"${gsIptablesRules}"
        [ -f "${gsIptablesRules}" ] && cp -f "${gsIptablesRules}" "$MySB_InstallDir"/files/current-iptables-rules
        if [ "$gbIsInstalled_Webmin" == "YES" ] && [ -d /etc/webmin/firewall/ ]; then
            cp "${gsIptablesRules}" /etc/webmin/firewall/iptables.save
        fi
        if [ -n "$gbDevMode" ] && [ "$gbDevMode" -eq 1 ]; then
            cat "${gsIptablesRules}" >>"$MySB_InstallDir/logs/IPTABLES/${gsScriptName}_IPTABLES.log"
        fi
        #### IPtables - SAVE Iptables Rules

        #### Complete previous upgrade
        if [ "${LoadOnBoot}" == "YES" ]; then
            ScriptOnBoot="$(cmdMySQL 'MySB_db' "SELECT name,script FROM repositories WHERE on_boot='1' AND active='1';" | sed 's/\t/|/g;')"
            if [ -n "$ScriptOnBoot" ]; then
                OIFS=$IFS
                IFS=$'\n'
                for Script in $ScriptOnBoot; do
                    Name="$(echo "$Script" | awk '{split($0,a,"|"); print a[1]}')"
                    File="$(echo "$Script" | awk '{split($0,a,"|"); print a[2]}')"

                    log_daemon_msg "${SecurityRules_UpgradeEnd} $Name"
                    gfnScriptInvoke 'ScreenSTD' "$File" 'INIT'
                    gfnStatusLSB
                done
                IFS=$OIFS
                unset IFS OIFS
            fi
        fi

        #### Flush mail queue
        if gfnCheckCommand 0 postfix && gfnGetPid postfix; then postfix flush; fi
        ;;

    refresh)
        #### First, we load all variables
        gfnLoadingVars

        #### IPtables - SAVE Iptables Rules
        log_daemon_msg "${SecurityRules_IPtables_Save}"
        iptables-save >"$MySB_InstallDir"/temp/current-iptables-rules
        if [ -n "$gbDevMode" ] && [ "$gbDevMode" -eq 1 ]; then
            cat "$MySB_InstallDir"/temp/current-iptables-rules >>"$MySB_InstallDir/logs/IPTABLES/${gsScriptName}_IPTABLES.log"
        fi
        gfnStatusLSB
        #### IPtables - SAVE Iptables Rules

        #### IPtables - ALTER Iptables Rules
        if [ "${ApplyIptablesLetsEncrypt}" == "YES" ]; then
            log_daemon_msg "${SecurityRules_IPtables_LetEncrypt}"

            # tcp_inbound chain
            gfnPopulatingTcpInboundChain 'letsencrypt'
            [ "${gbIsInstalled_PeerGuardian}" == "YES" ] && ServicesToRestart="${ServicesToRestart} pglcmd"
            # tcp_inbound chain

            gfnStatusLSB
        fi
        if [ "${ApplyIptablesUsers}" == "YES" ]; then
            log_daemon_msg "${SecurityRules_IPtables_Refresh}"

            # icmp_packets chain
            gfnPopulatingIcmpChain 'refresh'
            # icmp_packets chain

            # udp_inbound chain
            gfnPopulatingUdpInboundChain 'refresh'
            # udp_inbound chain

            # tcp_inbound chain
            gfnPopulatingTcpInboundChain 'refresh'
            # tcp_inbound chain

            gfnStatusLSB
        fi
        #### IPtables - ALTER Iptables Rules

        #### Services - Create all security rules for services
        gfnCreateServicesRules
        #### Services - Create all security rules for services

        #### IPtables - RESTORE Iptables Rules
        log_daemon_msg "${SecurityRules_IPtables_Restore}"
        if [ -n "$gbDevMode" ] && [ "$gbDevMode" -eq 1 ]; then
            cat "$MySB_InstallDir"/temp/current-iptables-rules >>"$MySB_InstallDir/logs/IPTABLES/${gsScriptName}_IPTABLES.log"
        fi
        iptables-restore <"$MySB_InstallDir"/temp/current-iptables-rules
        gfnStatusLSB
        #### IPtables - RESTORE Iptables Rules

        #### START services
        gfnRestartRtorrentSessions "stop"
        gfnRestartRtorrentSessions "start"
        gfnManageServices start "${ServicesToRestart} ${rTorrentToStart}"
        #### START services

        #### STOP services
        gfnManageServices stop "${ServicesToStop}"
        #### STOP services

        #### IPtables - SAVE Iptables Rules
        iptables-save >"${gsIptablesRules}"
        [ -f "${gsIptablesRules}" ] && cp -f "${gsIptablesRules}" "$MySB_InstallDir"/files/current-iptables-rules
        if [ "$gbIsInstalled_Webmin" == "YES" ] && [ -d /etc/webmin/firewall/ ]; then
            cp -f "${gsIptablesRules}" /etc/webmin/firewall/iptables.save
        fi
        if [ -n "$gbDevMode" ] && [ "$gbDevMode" -eq 1 ]; then
            cat "${gsIptablesRules}" >>"$MySB_InstallDir/logs/IPTABLES/${gsScriptName}_IPTABLES.log"
        fi
        #### IPtables - SAVE Iptables Rules

        #### Flush mail queue
        if gfnCheckCommand 0 postfix && gfnGetPid postfix; then postfix flush; fi
        ;;

    *)
        echo -e "${SecurityRules_Usage}"
        echo
        END=OFF
        export END
        gfnEndingScript 0
        ;;
esac

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
