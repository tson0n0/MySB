#!/bin/bash
# rev 5.5
# shellcheck disable=SC1001,SC2001
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################
vars=1
export vars
######################################################################

#### 0 - Includes
if [ -f /etc/MySB/config ] && [ -z "${MySB_InstallDir}" ]; then
    # shellcheck source=.etc/MySB/config
    source /etc/MySB/config
fi
if [ -f /lib/lsb/init-functions ] && [ -z "$(command -v start_daemon)" ]; then
    # shellcheck source=/dev/null
    source /lib/lsb/init-functions &>/dev/null
fi
if [ -f /root/.bash_aliases ]; then
    # shellcheck source=.root/.bash_aliases
    source /root/.bash_aliases
fi
if [ -n "${MySB_InstallDir}" ] && [ -f ${MySB_InstallDir}/inc/funcs ]; then
    if [ -z "${funcs}" ] || [ "${funcs}" -eq 0 ]; then
        # shellcheck source=inc/funcs
        source ${MySB_InstallDir}/inc/funcs
    fi
else
    echo "Loading '${MySB_InstallDir}/inc/funcs' error !"
    exit 1
fi

#### 1 - Colors
CEND="\033[0m"
CBLACK="\033[0;30m"
CRED="\033[1;31m"
CGREEN="\033[1;32m"
CYELLOW="\033[1;33m"
CBLUE="\033[1;34m"
export CEND CBLACK CRED CGREEN CYELLOW CBLUE

#### 2 - System
if [ "$0" != "-bash" ]; then
    gsScriptName="$(basename "$0")"
    gsDirName="$(dirname "$0")"
    export gsScriptName gsDirName
fi
gsInstallDirEscaped="$(echo "${MySB_InstallDir}" | sed s,/,\\\\\/,g)"
gsFilesDirEscaped="$(echo "$MySB_Files" | sed s,/,\\\\\/,g)"
gsProcessors="$(grep -c 'processor' /proc/cpuinfo)"
gsMemory="$(free -m | grep 'Mem' | awk '{ print $2 }')"
gsDebianRelease="$(lsb_release -cs)"
gsUrlCheckList="ifconfig.ovh ipv4.icanhazip.com whatismyip.akamai.com checkip.dyndns.com"
binCURL='curl --retry 3 --silent --insecure --location --show-error'
binMySQL="mysql --defaults-extra-file=/root/.config.cnf --database=MySB_db -w --connect-timeout=10 -s -N -e"
export gsInstallDirEscaped gsFilesDirEscaped gsProcessors gsMemory gsDebianRelease gsUrlCheckList binCURL binMySQL
# PHP
gsPhpDir="/etc/php/7.0"
binPhpFpm="php-fpm7.0"
binPhpService="php7.0-fpm"
binPhpEnmod="phpenmod"
export gsPhpDir binPhpFpm binPhpService binPhpEnmod
# GitHub API
#gsGitHubApiLimit="$($binCURL -i https://api.github.com/users/octocat | grep 'X-RateLimit-Remaining' | head -n 1 | awk '{ print $2 }')"
# IPtables rules
[ -f /etc/iptables.up.rules ] && gsIptablesRules="/etc/iptables.up.rules" || gsIptablesRules="/etc/iptables/rules.v4"
export gsIptablesRules

#### 3 - Organize script call to prevent simultaneous calls
if [ -n "$gsScriptName" ]; then
    case "$gsScriptName" in
        MySB_UpgradeSystem)
            if [ "$gbIsInstalled_DNScrypt" == "YES" ] && [ -f "${MySB_InstallDir}"/templates/init/etc.init.d.dnscrypt-proxy.tmpl ]; then
                install -o root -g root -m 0755 "${MySB_InstallDir}"/templates/init/etc.init.d.dnscrypt-proxy.tmpl /etc/init.d/dnscrypt-proxy
                systemctl daemon-reload
            fi
            ;;
        MySB_SecurityRules) echo "$$" >>/tmp/MySB_SecurityRules.lock ;;
        MySB_UpdateTools) echo "$$" >>/tmp/MySB_UpdateTools.lock ;;
    esac
fi

#### 4 - Databases
gsWolf_DB="${MySB_InstallDir}/db/Wolf.sq3"
gsSync_DB="${MySB_InstallDir}/db/Sync.sq3"
gsblocklists_DB="${MySB_InstallDir}/db/Blocklists.sq3"
gbIsReady_MySB_Db="NO"
if gfnCheckCommand 0 mysql && gfnCheckCommand 0 sqlite3; then
    if [ "$(find /var/lib/mysql/MySB_db/ -maxdepth 1 -type f 2>/dev/null | wc -l)" -gt 1 ]; then
        if ! gfnGetPid mysql; then
            gfnManageServices start "mysql"
        fi
        if gfnGetPid mysql; then
            gbIsReady_MySB_Db="YES"
        fi
    fi
fi
export gsWolf_DB gsSync_DB gbIsReady_MySB_Db gsblocklists_DB

#### 5 - All Variables
if [ -n "${MySB_InstallDir}" ] && [ "$gbIsReady_MySB_Db" == "YES" ]; then
    ########## USED FOR DATABASE UPGRADE - BoF ##########
    case "$gsScriptName" in
        From_*)
            if [ "$(cat "${MySB_InstallDir}"/version)" == "v99.99" ] && [ -f "${MySB_InstallDir}"/upgrade/MySQL.bsh ] && [ ! -f /tmp/MySQL.bsh.log ]; then
                # shellcheck source=upgrade/MySQL.bsh
                source "${MySB_InstallDir}"/upgrade/MySQL.bsh >/tmp/MySQL.bsh.log 2>&1
            fi
            ;;
    esac
    ########## USED FOR DATABASE UPGRADE - EoF ##########

    ### ----- System info
    ## Table System
    sRequestValues="$($binMySQL "SELECT mysb_version,hostname,ipv4,ipv4_ext,primary_inet,timezone,mysb_user,mysb_password,server_provider,ip_restriction,dnscrypt,rt_model,rt_tva,rt_global_cost,rt_cost_tva,ipv4_additional FROM system WHERE id_system='1';" | sed 's/\t/|/g;')"
    gsCurrentVersion="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[1]}')"
    gsHostNameFqdn="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[2]}')"
    gsSrvIpAddress="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[3]}')"
    gsSrvIpAddressExt="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[4]}')"
    gsPrimaryInet="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[5]}')"
    gsTimeZone="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[6]}')"
    gsMySB_User="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[7]}')"
    gsMySB_Password="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[8]}')"
    gsServerProvider="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[9]}')"
    gsIpRestriction="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[10]}' | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
    gbDnsCryptSwitch="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[11]}')"
    ### ----- Renting infos
    gsRentingModel="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[12]}')"
    gsRentingTVA="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[13]}')"
    gsRentingGlobalCost="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[14]}')"
    gsRentingCostTva="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[15]}')"
    ### ----- Renting infos
    gsSrvAdditionnalIpAddresses="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[16]}')"
    gsTimeZoneEscaped="$(echo "$gsTimeZone" | sed s,/,\\\\\/,g)"
    unset sRequestValues
    export gsMySB_User gsMySB_Password gsServerProvider gsIpRestriction gbDnsCryptSwitch
    export gsRentingModel gsRentingTVA gsRentingGlobalCost gsRentingCostTva gsSrvAdditionnalIpAddresses gsTimeZoneEscaped

    ## Table Services
    # VSFTPd
    sRequestValues="$($binMySQL "SELECT port_tcp1,port_tcp2,port_tcp3 FROM services WHERE serv_name='VSFTPd';" | sed 's/\t/|/g;')"
    gsPort_FTP="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[1]}')"
    gsPort_FTP_Data="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[2]}')"
    gsPort_FTP_Passive="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[3]}')"
    unset sRequestValues
    export gsPort_FTP gsPort_FTP_Data gsPort_FTP_Passive
    # NginX
    sRequestValues="$($binMySQL "SELECT port_tcp1,port_tcp2,port_tcp3 FROM services WHERE serv_name='NginX';" | sed 's/\t/|/g;')"
    gsPort_MySB_HTTPS="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[1]}')"
    gsPort_NginX_HTTP="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[2]}' | sed 's/NULL//g;')"
    gsPort_NginX_HTTPS="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[3]}' | sed 's/NULL//g;')"
    gsPort_System_HTTP="8888"
    unset sRequestValues
    export gsPort_MySB_HTTPS gsPort_NginX_HTTP gsPort_NginX_HTTPS gsPort_System_HTTP
    # SSH
    gsPort_SSH="$($binMySQL "SELECT port_tcp1 FROM services WHERE serv_name='SSH';")"
    export gsPort_SSH

    [ -z "$gsHostNameFqdn" ] && gsHostNameFqdn="$(hostname -f)"
    export gsHostNameFqdn

    [ -z "$gsPrimaryInet" ] && gsPrimaryInet="$(ip route get 8.8.8.8 | grep 8.8.8.8 | awk '{ print $5 }')"
    export gsPrimaryInet

    if [ -z "$gsSrvIpAddress" ] || [ -z "$gsSrvIpAddressExt" ]; then
        gsSrvIpAddressExt="$(dig TXT +short o-o.myaddr.l.google.com @ns1.google.com @ns2.google.com @ns3.google.com @ns4.google.com | awk -F'"' '{ print $2}' 2>/dev/null)"

        if [ -z "$gsSrvIpAddressExt" ]; then
            for sUrlCheck in $gsUrlCheckList; do
                case "$sUrlCheck" in
                    'checkip.dyndns.com') gsSrvIpAddressExt="$(curl --silent "$sUrlCheck" | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')" ;;
                    *) gsSrvIpAddressExt="$(curl --silent "$sUrlCheck")" ;;
                esac
                [ -n "$gsSrvIpAddressExt" ] && break
            done
        fi

        gsSrvIpAddress="$(ip addr | grep "$gsPrimaryInet" | grep 'inet ' | awk '{ print $2 }' | cut -d "/" -f1)"
        if [ -z "$gsSrvIpAddress" ]; then
            gsSrvIpAddress="$(ifconfig "$gsPrimaryInet" | sed -n 's/.*inet addr:\([0-9.]\+\)\s.*/\1/p' | grep -v 127 | head -n 1)"
            if [ -z "$gsSrvIpAddress" ]; then
                gsSrvIpAddress="$(ifconfig "$gsPrimaryInet" | sed -n 's/.*inet adr:\([0-9.]\+\)\s.*/\1/p' | grep -v 127 | head -n 1)"
            fi
        fi
        for sIp in $gsSrvIpAddress; do
            if [ -z "$sPrimary" ]; then
                sPrimary="$sIp"
            else
                [ -z "$sOthers" ] && sOthers="$sIp" || sOthers="$sOthers $sIp"
            fi
        done
        gsSrvIpAddress="$sPrimary"
        [ -n "$sOthers" ] && gsSrvAdditionnalIpAddresses="$sOthers"
        # Compare IP address (external view) with real IP address (local view)
        if [ -z "$gsSrvIpAddress" ]; then
            gsSrvIpAddress="$gsSrvIpAddressExt"
        fi
        unset sUrlCheck sIp sPrimary
        export gsSrvIpAddress gsSrvIpAddressExt
    fi

    if [ -f /etc/timezone ] && [ -z "$gsTimeZone" ]; then
        gsTimeZone="$(cat /etc/timezone)"
    else
        gsTimeZone="Europe/Paris"
    fi
    export gsTimeZone
    ### ----- System info

    ### ----- Main user info
    ## Table users
    sRequestValues="$($binMySQL "SELECT users_email,users_ident,users_passwd,id_users,language FROM users WHERE admin='1';" | sed 's/\t/|/g;')"
    gsMainUserEmail="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[1]}')"
    gsMainUserName="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[2]}')"
    gsMainUserPassword="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[3]}')"
    gnMainUserId="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[4]}')"
    [ -z "$EnvLang" ] && EnvLang="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[5]}')"
    [ -z "$EnvLang" ] && EnvLang="${LANG:0:2}"
    case "$EnvLang" in
        "fr") gsLocale="fr_FR" ;;
        "en") gsLocale="en_US" ;;
    esac
    unset sRequestValues
    export gsMainUserEmail gsMainUserName gsMainUserPassword gnMainUserId EnvLang gsLocale

    if [ "$gsIpRestriction" == "YES" ]; then
        unset gsMainUserIPs
        sTemp="$($binMySQL "SELECT ipv4 FROM users_addresses WHERE is_active='1' AND id_users='$gnMainUserId';")"
        for sIp in $sTemp; do
            sIp="$(echo "$sIp" | sed -e 's/^ //g;' | sed 's/\s+$//')"
            gsMainUserIPs="$gsMainUserIPs $sIp/32"
        done
        unset sTemp sIp
    else
        gsMainUserIPs="0/0"
    fi
    gsMainUserIPs="$(echo $gsMainUserIPs | sed -e 's/^ //g;' | sed 's/\s+$//' | sort | uniq)"
    export gsMainUserIPs
    ### ----- Main user info

    ### ----- Normal users info
    if [ "$gsIpRestriction" == "YES" ]; then
        unset gsSeedboxUsersIPs
        sTemp="$($binMySQL "SELECT ipv4 FROM users_addresses WHERE is_active='1' AND id_users!='$gnMainUserId';")"
        if [ -n "$sTemp" ]; then
            for sIp in $sTemp; do
                sIp="$(echo "$sIp" | sed -e 's/^ //g;' | sed 's/\s+$//')"
                gsSeedboxUsersIPs="${gsSeedboxUsersIPs} $sIp/32"
            done
        fi
        unset sTemp sIp
    else
        gsSeedboxUsersIPs="0/0"
    fi
    gsSeedboxUsersIPs="$(echo "$gsSeedboxUsersIPs" | sed -e 's/^ //g;' | sed 's/\s+$//' | sort | uniq)"
    export gsSeedboxUsersIPs
    ### ----- Normal users info

    ### ----- Services info
    sRequestValues="$($binMySQL "SELECT id_services,to_install,is_installed FROM services WHERE used='1';" | sed 's/\t/|/g;')"
    for sValues in $sRequestValues; do
        nIdService="$(echo "$sValues" | awk '{split($0,a,"|"); print a[1]}')"
        bToInstall="$(echo "$sValues" | awk '{split($0,a,"|"); print a[2]}')"
        bIsInstalled="$(echo "$sValues" | awk '{split($0,a,"|"); print a[3]}')"
        case "$nIdService" in
            1)
                gbToInstall_Manager="$(echo "$bToInstall" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                gbIsInstalled_Manager="$(echo "$bIsInstalled" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                ;;
            2)
                gbToInstall_Cakebox="$(echo "$bToInstall" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                gbIsInstalled_Cakebox="$(echo "$bIsInstalled" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                ;;
            3)
                gbToInstall_PlexMedia="$(echo "$bToInstall" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                gbIsInstalled_PlexMedia="$(echo "$bIsInstalled" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                ;;
            4)
                gbToInstall_Webmin="$(echo "$bToInstall" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                gbIsInstalled_Webmin="$(echo "$bIsInstalled" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                ;;
            5)
                gbToInstall_OpenVPN="$(echo "$bToInstall" | sed 's/0/NO/g;' | sed 's/1/YES/g;' | sed 's/2/REFRESH/g;')"
                gbIsInstalled_OpenVPN="$(echo "$bIsInstalled" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                ;;
            6)
                gbToInstall_LogWatch="$(echo "$bToInstall" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                gbIsInstalled_LogWatch="$(echo "$bIsInstalled" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                ;;
            7)
                gbToInstall_Fail2Ban="$(echo "$bToInstall" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                gbIsInstalled_Fail2Ban="$(echo "$bIsInstalled" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                ;;
            8)
                gbToInstall_PeerGuardian="$(echo "$bToInstall" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                gbIsInstalled_PeerGuardian="$(echo "$bIsInstalled" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                ;;
            9)
                gbToInstall_Blocklist="$(echo "$bToInstall" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                gbIsInstalled_Blocklist="$(echo "$bIsInstalled" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                ;;
            10)
                gbToInstall_DNScrypt="$(echo "$bToInstall" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                gbIsInstalled_DNScrypt="$(echo "$bIsInstalled" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                ;;
            18)
                gbToInstall_Samba="$(echo "$bToInstall" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                gbIsInstalled_Samba="$(echo "$bIsInstalled" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                ;;
            19)
                gbToInstall_NFS="$(echo "$bToInstall" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                gbIsInstalled_NFS="$(echo "$bIsInstalled" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                ;;
            24)
                gbToInstall_NextCloud="$(echo "$bToInstall" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                gbIsInstalled_NextCloud="$(echo "$bIsInstalled" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                ;;
            25)
                gbToInstall_LetsEncrypt="$(echo "$bToInstall" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                gbIsInstalled_LetsEncrypt="$(echo "$bIsInstalled" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                ;;
            26)
                gbToInstall_Tautulli="$(echo "$bToInstall" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                gbIsInstalled_Tautulli="$(echo "$bIsInstalled" | sed 's/0/NO/g;' | sed 's/1/YES/g;')"
                ;;
        esac
        unset nIdService bToInstall bIsInstalled
    done
    unset sRequestValues sValues
    export gbIsInstalled_Blocklist gbIsInstalled_Cakebox gbIsInstalled_DNScrypt gbIsInstalled_Fail2Ban gbIsInstalled_LetsEncrypt gbIsInstalled_LogWatch gbIsInstalled_Manager
    export gbIsInstalled_NFS gbIsInstalled_NextCloud gbIsInstalled_OpenVPN gbIsInstalled_PeerGuardian gbIsInstalled_PlexMedia gbIsInstalled_Webmin gbIsInstalled_Tautulli gbIsInstalled_Samba
    export gbToInstall_Tautulli gbToInstall_Blocklist gbToInstall_Cakebox gbToInstall_Fail2Ban gbToInstall_DNScrypt gbToInstall_LetsEncrypt gbToInstall_LogWatch gbToInstall_Manager
    export gbToInstall_NFS gbToInstall_NextCloud gbToInstall_OpenVPN gbToInstall_PeerGuardian gbToInstall_PlexMedia gbToInstall_Webmin gbToInstall_Tautulli gbToInstall_Samba

    case "$gbToInstall_PeerGuardian" in
        "YES") gsMySB_PeerBlock="PeerGuardian" ;;
        "NO")
            case "$gbIsInstalled_PeerGuardian" in
                "YES") gsMySB_PeerBlock="PeerGuardian" ;;
                "NO")
                    case "$gbToInstall_Blocklist" in
                        "YES") gsMySB_PeerBlock="rTorrent" ;;
                        "NO")
                            case "$gbIsInstalled_Blocklist" in
                                "YES") gsMySB_PeerBlock="rTorrent" ;;
                                "NO") gsMySB_PeerBlock="$Global_None" ;;
                            esac
                            ;;
                    esac
                    ;;
            esac
            ;;
    esac
    export gsMySB_PeerBlock

    # Webmin port
    gsPorts_Webmin="$($binMySQL "SELECT port_tcp1 FROM services WHERE serv_name='Webmin';")"
    export gsPorts_Webmin

    # OpenVPN
    sRequestValues="$($binMySQL "SELECT port_udp1,port_udp2,port_udp3 FROM services WHERE serv_name='OpenVPN';" | sed 's/\t/|/g;')"
    gsPort_OpenVPN_WithGW="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[1]}')"
    gsPort_OpenVPN_WithoutGW="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[2]}')"
    gsPort_OpenVPN_TAP_WithoutGW="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[3]}')"
    if [ -n "$gsPort_OpenVPN_WithGW" ]; then # UDP
        gsOpenVPN_Proto="udp"
    else # TCP
        sRequestValues="$($binMySQL "SELECT port_tcp1,port_tcp2,port_tcp3 FROM services WHERE serv_name='OpenVPN';" | sed 's/\t/|/g;')"
        gsPort_OpenVPN_WithGW="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[1]}')"
        gsPort_OpenVPN_WithoutGW="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[2]}')"
        gsPort_OpenVPN_TAP_WithoutGW="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[3]}')"
        gsOpenVPN_Proto="tcp"
    fi
    unset sRequestValues
    export gsOpenVPN_Proto gsPort_OpenVPN_TAP_WithoutGW gsPort_OpenVPN_WithoutGW gsPort_OpenVPN_WithGW
    ### ----- Services info

    ### ----- White IP addresses
    gsVpnLocalIps='10.0.0.0/24 10.0.1.0/24 10.0.2.0/24'
    export gsVpnLocalIps
    ### ----- White IP addresses

    ### ----- Networks ports (Services ports)
    sRequestValues="$($binMySQL "SELECT port_tcp1,ports_tcp_list,ports_udp_list FROM services WHERE serv_name='Plex Media Server';" | sed 's/\t/|/g;')"
    gsPorts_PlexMedia="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[1]}')"
    gsPorts_TCP_PlexMedia="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[2]}')"
    gsPorts_UDP_PlexMedia="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[3]}')"
    unset sRequestValues
    export gsPorts_PlexMedia gsPorts_TCP_PlexMedia gsPorts_UDP_PlexMedia
    ### ----- Networks ports (Services ports)

    ### ----- Repositories infos
    gsRutorrentDir="$($binMySQL "SELECT dir FROM repositories WHERE name='ruTorrent';" | sed "s/<InstallDir>/$gsInstallDirEscaped/g;")"
    gsManagerDir="$($binMySQL "SELECT dir FROM repositories WHERE name='Seedbox-Manager';" | sed "s/<InstallDir>/$gsInstallDirEscaped/g;")"
    gsCakeboxDir="$($binMySQL "SELECT dir FROM repositories WHERE name='Cakebox-Light';" | sed "s/<InstallDir>/$gsInstallDirEscaped/g;")"
    gsLoadAvgDir="$($binMySQL "SELECT dir FROM repositories WHERE name='LoadAvg';" | sed "s/<InstallDir>/$gsInstallDirEscaped/g;")"
    gsNextCloudDir="$($binMySQL "SELECT dir FROM repositories WHERE name='NextCloud';" | sed "s/<InstallDir>/$gsInstallDirEscaped/g;")"
    gsRutorrentPluginsDir="$gsRutorrentDir/plugins"
    export gsRutorrentDir gsManagerDir gsCakeboxDir gsLoadAvgDir gsNextCloudDir gsRutorrentPluginsDir
    ### ----- Repositories infos
fi

#### 6 - Version for upgrade
if [ -f "${MySB_InstallDir}"/version ]; then
    gsCurrentVersion="$(cat "${MySB_InstallDir}"/version)"
fi
export gsCurrentVersion

#### Language
gfnLoadLanguage() {
    local sScriptLang

    if [ -f "${MySB_InstallDir}/inc/lang/$EnvLang/Global.lng" ]; then
        # shellcheck source=inc/lang/en/Global.lng
        source "${MySB_InstallDir}/inc/lang/$EnvLang/Global.lng"
    else
        # shellcheck source=inc/lang/en/Global.lng
        source "${MySB_InstallDir}/inc/lang/en/Global.lng"
    fi

    if [ -z "$1" ]; then
        sScriptLang="$gsScriptName"
    else
        sScriptLang="$1"
    fi
    if [ -f "${MySB_InstallDir}/inc/lang/$EnvLang/$sScriptLang.lng" ]; then
        # shellcheck source=inc/lang/en/Global.lng
        source "${MySB_InstallDir}/inc/lang/$EnvLang/$sScriptLang.lng"
    else
        if [ -f "${MySB_InstallDir}/inc/lang/en/$sScriptLang.lng" ]; then
            # shellcheck source=inc/lang/en/Global.lng
            source "${MySB_InstallDir}/inc/lang/en/$sScriptLang.lng"
        fi
    fi

    case "$sScriptLang" in
        Questions) # Questions ?
            if [ "$(gfnCheckCommand 1 geoiplookup)" == "YES" ] && [ -n "$gsSrvIpAddressExt" ]; then
                sCountry="$(geoiplookup "$gsSrvIpAddressExt" | awk '{ print $5 }')"
                [ -z "$sCountry" ] && sCountry="unknown"
            else
                sCountry="unknown"
            fi
            if [ -f "${MySB_InstallDir}/inc/lang/$EnvLang/Questions.lng" ]; then
                # shellcheck source=inc/lang/en/Questions.lng
                source "${MySB_InstallDir}/inc/lang/$EnvLang/Questions.lng"
            else
                # shellcheck source=inc/lang/en/Questions.lng
                source "${MySB_InstallDir}/inc/lang/en/Questions.lng"
            fi
            ;;
        BulkChanges.bsh | From_*) # Upgrade ?
            if [ -f "${MySB_InstallDir}/inc/lang/$EnvLang/Upgrade.lng" ]; then
                # shellcheck source=inc/lang/en/Upgrade.lng
                source "${MySB_InstallDir}/inc/lang/$EnvLang/Upgrade.lng"
            else
                # shellcheck source=inc/lang/en/Upgrade.lng
                source "${MySB_InstallDir}/inc/lang/en/Upgrade.lng"
            fi
            ;;
        funcs_MySB_CreateUser)
            if [ -f "${MySB_InstallDir}/inc/lang/$EnvLang/MySB_CreateUser.lng" ]; then
                # shellcheck source=inc/lang/en/MySB_CreateUser.lng
                source "${MySB_InstallDir}/inc/lang/$EnvLang/MySB_CreateUser.lng"
            else
                # shellcheck source=inc/lang/en/MySB_CreateUser.lng
                source "${MySB_InstallDir}/inc/lang/en/MySB_CreateUser.lng"
            fi
            ;;
        funcs_GetTrackersCert.bsh)
            if [ -f "${MySB_InstallDir}/inc/lang/$EnvLang/GetTrackersCert.bsh.lng" ]; then
                # shellcheck source=inc/lang/en/GetTrackersCert.bsh.lng
                source "${MySB_InstallDir}/inc/lang/$EnvLang/GetTrackersCert.bsh.lng"
            else
                # shellcheck source=inc/lang/en/GetTrackersCert.bsh.lng
                source "${MySB_InstallDir}/inc/lang/en/GetTrackersCert.bsh.lng"
            fi
            ;;
        PeerGuardian)
            if [ -f "${MySB_InstallDir}/inc/lang/$EnvLang/MySB_SecurityRules.lng" ]; then
                # shellcheck source=inc/lang/en/MySB_SecurityRules.lng
                source "${MySB_InstallDir}/inc/lang/$EnvLang/MySB_SecurityRules.lng"
            else
                # shellcheck source=inc/lang/en/MySB_SecurityRules.lng
                source "${MySB_InstallDir}/inc/lang/en/MySB_SecurityRules.lng"
            fi
            ;;
    esac
}
gfnLoadLanguage ""

# Dev mode, Save all variables
if [ -f ./dev ] || [ -f "${MySB_InstallDir}/dev" ]; then
    gbDevMode=1
else
    gbDevMode=0
fi
if [ -n "$gbDevMode" ] && [ $gbDevMode -eq 1 ] && [ -d "${MySB_InstallDir}/logs" ]; then
    [ ! -d "${MySB_InstallDir}/logs/VARs" ] && mkdir "${MySB_InstallDir}/logs/VARs"
    [ ! -d "${MySB_InstallDir}/logs/PGLCMD" ] && mkdir "${MySB_InstallDir}/logs/PGLCMD"
    [ ! -d "${MySB_InstallDir}/logs/IPTABLES" ] && mkdir "${MySB_InstallDir}/logs/IPTABLES"
    [ ! -d "${MySB_InstallDir}/logs/TODEL" ] && mkdir "${MySB_InstallDir}/logs/TODEL"
    (   
        set -o posix
        set
    ) | grep -e '^gs' -e '^gb' -e '^gn' >"${MySB_InstallDir}/logs/VARs/${gsScriptName}_VARs.log"
fi
export gbDevMode

##################### LAST LINE ######################################
