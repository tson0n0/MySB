#!/bin/bash
# rev 5.5
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
{ [ -z "${vars}" ] || [ "${vars}" -ne 1 ]; } && {
	echo "Please load 'vars' file before..."
	return
}
##################### FIRST LINE #####################################

#### Delete Bad Sources
# gfnDeleteBadSources() {
# 	local sSourcesFile

# 	if [ -z "$1" ]; then
# 		sSourcesFile="/etc/apt/sources.list"
# 	else
# 		sSourcesFile="$1"
# 	fi

# Delete bad sources
# sed -i '/ftp.nerim.net/d' $sSourcesFile
# sed -i '/ftp.upcnet.ro/d' $sSourcesFile
# sed -i '/dist1.800hosting.com/d' $sSourcesFile
# sed -i '/debian.inhost.pro/d' $sSourcesFile
# sed -i '/debian.mirror.digitalpacific.com.au/d' $sSourcesFile
# sed -i '/ftp.th.debian.org/d' $sSourcesFile
# sed -i '/ftp.debian.chuvsu.ru/d' $sSourcesFile
# sed -i '/mirror.atomki.mta.hu/d' $sSourcesFile
# sed -i '/mirror.debian.ikoula.com/d' $sSourcesFile
# sed -i '/mirror.neolabs.kz/d' $sSourcesFile
# sed -i '/debian.bononia.it/d' $sSourcesFile
# sed -i '/mirrors.evowise.com/d' $sSourcesFile
# sed -i '/ftp.heikorichter.name/d' $sSourcesFile
# }

#### Apt-Key Manage
# gfnAptKeyManage() {
# 	local sKey="$1"

# 	# DotDeb Renew key
# 	if (apt-key list | grep -q "$sKey"); then
# 		apt-key adv --keyserver keys.gnupg.net --recv-keys "$sKey"
# 	fi
# }

#### APT-mirror (local mirror for PeerGuardian, Webmin, Plexmedia Server)
gfnCreateLocalMirror() {
	local sArch

	case $(getconf LONG_BIT) in
	64) sArch="amd64" ;;
	*) sArch="i386" ;;
	esac

	#### mirror.list
	install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/apt/etc.apt.mirror.list.tmpl /etc/apt/mirror.list
	perl -pi -e "s/<Arch>/$sArch/g" /etc/apt/mirror.list

	#### postmirror.sh & clean.sh
	if [ ! -f /var/spool/apt-mirror/var/clean.sh ]; then
		touch /var/spool/apt-mirror/var/clean.sh
	fi
	echo '#!/bin/sh' >/var/spool/apt-mirror/var/postmirror.sh
	echo "/var/spool/apt-mirror/var/clean.sh" >>/var/spool/apt-mirror/var/postmirror.sh
	chmod 0755 /var/spool/apt-mirror/var/*.sh
	chown apt-mirror:apt-mirror /var/spool/apt-mirror/var/*.sh

	#### Docker
	# GPG Key
	$binCURL -o "/tmp/docker.key" "https://download.docker.com/linux/debian/gpg"
	if [ -f /tmp/docker.key ]; then
		apt-key add /tmp/docker.key
	fi
	# Local mirrors
	{
		echo "# Docker"
		echo "deb https://download.docker.com/linux/debian/ ${gsDebianRelease} stable"
		echo "clean https://download.docker.com/linux/debian/"
	} >>/etc/apt/mirror.list
	# docker.list (local)
	echo "# Docker" >/etc/apt/sources.list.d/docker.list
	echo "deb file:///var/spool/apt-mirror/mirror/download.docker.com/linux/debian/ ${gsDebianRelease} stable" >>/etc/apt/sources.list.d/docker.list

	#### Peerguardian
	if [ "${gbToInstall_PeerGuardian}" == "YES" ] || [ "${gbIsInstalled_PeerGuardian}" == "YES" ]; then
		# GPG Key
		until gpg --keyserver keyserver.ubuntu.com --recv-keys C0145138; do
			sleep 1
		done
		until gpg --export --armor C0145138 | apt-key add -; do
			sleep 1
		done
		# Local mirrors
		{
			echo "# PeerGuardian"
			echo "deb http://moblock-deb.sourceforge.net/debian/ ${gsDebianRelease} main"
			echo "clean http://moblock-deb.sourceforge.net/debian/"
		} >>/etc/apt/mirror.list
		# peerguardian.list (local)
		echo "# PeerGuardian" >/etc/apt/sources.list.d/peerguardian.list
		echo "deb file:///var/spool/apt-mirror/mirror/moblock-deb.sourceforge.net/debian/ ${gsDebianRelease} main" >>/etc/apt/sources.list.d/peerguardian.list
	fi

	#### Webmin
	if [ "${gbToInstall_Webmin}" == "YES" ] || [ "${gbIsInstalled_Webmin}" == "YES" ]; then
		# GPG Key
		$binCURL -o "/tmp/jcameron-key.asc" "http://www.webmin.com/jcameron-key.asc"
		if [ -f /tmp/jcameron-key.asc ]; then
			apt-key add /tmp/jcameron-key.asc
		fi
		# Local mirrors
		{
			echo "# Webmin"
			echo "deb http://download.webmin.com/download/repository/ sarge contrib"
			echo "clean http://download.webmin.com/download/repository/"
			echo "deb http://webmin.mirror.somersettechsolutions.co.uk/repository/ sarge contrib"
			echo "clean http://webmin.mirror.somersettechsolutions.co.uk/repository/"
		} >>/etc/apt/mirror.list
		# webmin.list (local)
		echo "# Webmin" >/etc/apt/sources.list.d/webmin.list
		echo "deb file:///var/spool/apt-mirror/mirror/download.webmin.com/download/repository/ sarge contrib" >>/etc/apt/sources.list.d/webmin.list
		echo "deb file:///var/spool/apt-mirror/mirror/webmin.mirror.somersettechsolutions.co.uk/repository/ sarge contrib" >>/etc/apt/sources.list.d/webmin.list
	fi

	#### Download mirrors with 'apt-mirror'
	echo
	cat /etc/apt/mirror.list
	echo
	apt-mirror
}

#### Basics Sources List
gfnCreateBasicSourcesList() {
	local sReposInFile sSourcesList sRepo

	sReposInFile="$(grep '^deb ' /etc/apt/sources.list | grep -v 'security' | grep -v 'updates' | awk '{ print $2 }')"
	sReposInFile="$sReposInFile http://ftp.fr.debian.org/debian/ http://ftp2.fr.debian.org/debian/"
	sSourcesList="/etc/apt/sources.list"

	echo "# Basic Sources List" >$sSourcesList
	for sRepo in $sReposInFile; do
		if (! grep -q "$sRepo" $sSourcesList); then
			{
				echo ""
				echo "# $sRepo"
				echo "deb $sRepo $gsDebianRelease main contrib non-free"
				echo "deb $sRepo $gsDebianRelease-updates main contrib non-free"
			} >>$sSourcesList
		fi
	done

	{
		echo ""
		echo "# Security"
		echo "deb http://security.debian.org $gsDebianRelease/updates main contrib non-free"
	} >>$sSourcesList
}

##################### LAST LINE ######################################
